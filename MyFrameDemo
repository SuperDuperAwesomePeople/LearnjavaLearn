import java.awt.Container;
import java.util.List;
import javax.swing.*;
import java.awt.event.*;
import java.awt.GridLayout;
import java.awt.Window;
import java.util.ArrayList;
import java.util.Arrays;

import javax.swing.JFrame;
import javax.swing.JPanel;
import java.awt.Color;

public class MyFrameDemo extends JFrame implements KeyListener{
	static MyFrameDemo grid = new MyFrameDemo();
	static int r = 3;
	static Container container = grid.getContentPane();
	static ArrayList<JPanel>components = new ArrayList<JPanel>();
	static int[] bricks = new int[3];

	
	public static void main(String[] args) {
		grid.addKeyListener(grid);
		grid.setSize(900,900);
		grid.setResizable( false );
		grid.setLocationRelativeTo( null );
		grid.setLayout( new GridLayout(r,r) );
		JPanel temp = null;
		for ( int i = 0; i < 9; i++ )
		{
			  temp = new JPanel();
			  container.add(temp);
			  components.add(temp);
			  components.get( i ).setBackground( Color.WHITE );
			  
		}
		grid.setVisible(true);

		components.get( r ).setBackground( Color.GREEN );
		bricks[0] = -1;
		bricks[1] = 1;
		bricks[2] = 5;
		for (int i = 0; i < 3; i++){
			int brick;
			brick = bricks[i];
			components.get(brick).setBackground(Color.ORANGE);
		}
	}
	
	public static boolean bricksUp(int[] array, int number) {	
		int a =  Arrays.binarySearch(array, (number - 3));
		if(a > 0)
			return true;
		else
			return false;
	}
	public static boolean bricksDown(int[] array, int number) {	
		int a =  Arrays.binarySearch(array, (number + 3));
		if(a > 0)
			return true;
		else
			return false;
	}
	public static boolean bricksRight(int[] array, int number ) {	
		int a =  Arrays.binarySearch(array, (number + 1));
		if(a > 0)
			return true;
		else
			return false;
	}
	 public static boolean bricksLeft(int[] array, int number) {	
		int a =  Arrays.binarySearch(array, (number - 1));
		if(a > 0)
			return true;
		else
			return false;
	}
	
	
	@Override
	public void keyPressed(KeyEvent e) {

		if(e.getKeyCode()==38 && r > 2 && bricksUp(bricks, r) == false){
			r = r - 3;
			components.get( r ).setBackground( Color.GREEN );
			components.get(r + 3).setBackground(Color.WHITE);
		}
		if(e.getKeyCode()==37 && r % 3 != 0 && bricksLeft(bricks, r) == false){
			r = r - 1;
			components.get( r ).setBackground( Color.GREEN );
			components.get(r + 1).setBackground(Color.WHITE);
		}
		if(e.getKeyCode()==39 && r % 3 != 2 && bricksRight(bricks, r) == false){
			r = r + 1;
			components.get( r ).setBackground( Color.GREEN );
			components.get(r - 1).setBackground(Color.WHITE);
		}
		if(e.getKeyCode()==40 && r < 6 && bricksDown(bricks, r) == false){
			r = r + 3;
			components.get( r ).setBackground( Color.GREEN );
			components.get(r - 3).setBackground(Color.WHITE);
		}
	}

	@Override
	public void keyReleased(KeyEvent e) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void keyTyped(KeyEvent e) {
		// TODO Auto-generated method stub
		
	}
}
