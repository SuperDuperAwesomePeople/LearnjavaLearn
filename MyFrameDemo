import java.awt.Container;
import java.util.List;
import java.awt.event.*;
import java.awt.GridLayout;
import java.awt.Window;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Random;
import java.awt.Color;
import java.awt.Image;
import java.net.URL;
import java.io.IOException;
import javax.imageio.ImageIO;



import javax.swing.*;


public class MyFrameDemo extends JFrame implements KeyListener {
	
	static MyFrameDemo grid = new MyFrameDemo();
	static int r = 12;
	static Container container = grid.getContentPane();
	static ArrayList<JPanel>components = new ArrayList<JPanel>();
	static int[] bricks = new int[7];
	static String facing = "neutral";
	static Image image = null;
	static Icon icon = null;
	
	public static void main(String[] args) {
		grid.addKeyListener(grid);
		grid.setSize(900,900);
		grid.setResizable( true );
		grid.setLocationRelativeTo( null );
		grid.setLayout( new GridLayout(5,5) );
		JPanel temp = null;
		for ( int i = 0; i < 25; i++ )
		{
			  temp = new JPanel();
			  container.add(temp);
			  components.add(temp);
			  components.get( i ).setBackground( Color.WHITE );
			  
		}
		grid.setVisible(true);

		components.get( 12 ).setBackground( Color.GREEN );
		
		bricks[0] = -1;
		bricks[1] = 2;
		bricks[2] = 3;
		bricks[3] = 4;
		bricks[4] = 7;
		bricks[5] = 8;
		bricks[6] = 9;
		
		for (int i = 1; i < 7; i++){
			int brick;
			brick = bricks[i];
			components.get(brick).setBackground(Color.ORANGE);
		}
		
		components.get(9).setBackground(Color.BLUE);
	}
	
	public static boolean bricksUp(int[] array, int number) {	
		int a =  Arrays.binarySearch(array, (number - 5));
		if(a > 0)
			return true;
		else
			return false;
	}
	public static boolean bricksDown(int[] array, int number) {	
		int a =  Arrays.binarySearch(array, (number + 5));
		if(a > 0)
			return true;
		else
			return false;
	}
	public static boolean bricksRight(int[] array, int number ) {	
		int a =  Arrays.binarySearch(array, (number + 1));
		if(a > 0)
			return true;
		else
			return false;
	}
	 public static boolean bricksLeft(int[] array, int number) {	
		int a =  Arrays.binarySearch(array, (number - 1));
		if(a > 0)
			return true;
		else
			return false;
	}
	
	
	@Override
	public void keyPressed(KeyEvent e) {
		try{
			URL url = new URL("https://t3hwin.com/i/2015/06/Dick-butt-BW.jpg");
			image = ImageIO.read(url);
			icon = new ImageIcon(image);
		} catch (IOException o){
			
		}
		if(e.getKeyCode()==38){
			facing = "up";
			if(r > 4 && bricksUp(bricks, r) == false) {
				r = r - 5;
				components.get( r ).setBackground( Color.GREEN );
				components.get(r + 5).setBackground(Color.WHITE);
			}
		}
		if(e.getKeyCode()==37){
			facing = "left";
			if(r % 5 != 0 && bricksLeft(bricks, r) == false) {
				r = r - 1;
				components.get( r ).setBackground( Color.GREEN );
				components.get(r + 1).setBackground(Color.WHITE);
			}
		}
		if(e.getKeyCode()==39){
			facing = "right";
			if(r % 5 != 4 && bricksRight(bricks, r) == false) {
				r = r + 1;
				components.get( r ).setBackground( Color.GREEN );
				components.get(r - 1).setBackground(Color.WHITE);
			}
		}
		if(e.getKeyCode()==40){
			facing = "down";
			if(r < 20 && bricksDown(bricks, r) == false) {
			r = r + 5;
			components.get( r ).setBackground( Color.GREEN );
			components.get(r - 5).setBackground(Color.WHITE);
			}
		}
		if(e.getKeyCode()==84){
			if (facing == "up" && r == 14){
				JOptionPane.showMessageDialog(null,
					    "Wizard: You Suck!",
					    "You suck! Congrats!",
					    JOptionPane.INFORMATION_MESSAGE,
					    icon);
			}
		}
	}

	@Override
	public void keyReleased(KeyEvent e) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void keyTyped(KeyEvent e) {
		// TODO Auto-generated method stub
		
	}
}
