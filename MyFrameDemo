import java.awt.Container;
import java.util.List;
import java.awt.event.*;
import java.awt.GridLayout;
import java.awt.Window;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Random;
import java.awt.Color;

import javax.swing.*;


public class MyFrameDemo extends JFrame implements KeyListener{
	static MyFrameDemo grid = new MyFrameDemo();
	static int r = 5;
	static Container container = grid.getContentPane();
	static ArrayList<JPanel>components = new ArrayList<JPanel>();
	static int[] bricks = new int[6];
	static int start;
	static int finishLine;

	public static int randStart(int min, int max) {
	    Random rand = new Random();
	    int start = rand.nextInt((max - min) + 1) + min;
		components.get( start ).setBackground( Color.GREEN );
	    return start;
	}
	
	public static int randFinish(int start) {
	    Random rand = new Random();
	    int randomFinish = rand.nextInt((24 - 13) + 1) + 13;
	    while (randomFinish == start){
		    randomFinish = rand.nextInt((24 - 13) + 1) + 13;
	    }
	    components.get( randomFinish ).setBackground( Color.RED );
	    return randomFinish;
	}
	
	public static int randBrick(int finishLine) {
	    Random rand = new Random();
	    int randomBrick = rand.nextInt((24 - 0) + 1) + 0;
	    while (randomBrick == 1 || randomBrick == 6 || randomBrick == 5 || randomBrick == (finishLine - 1) || randomBrick == (finishLine + 1) || randomBrick == (finishLine + 5) || randomBrick == (finishLine - 5) || randomBrick == finishLine){
		    randomBrick = rand.nextInt((24 - 0) + 1) + 0;
	    }
		components.get(randomBrick).setBackground(Color.ORANGE);
	    return randomBrick;
	}
	
	public static void main(String[] args) {
		grid.addKeyListener(grid);
		grid.setSize(900,900);
		grid.setResizable( true );
		grid.setLocationRelativeTo( null );
		grid.setLayout( new GridLayout(5,5) );
		JPanel temp = null;
		for ( int i = 0; i < 25; i++ )
		{
			  temp = new JPanel();
			  container.add(temp);
			  components.add(temp);
			  components.get( i ).setBackground( Color.WHITE );
			  
		}
		grid.setVisible(true);
		start = randStart(0, 24);
		finishLine = randFinish(start);
		bricks[0] = -1;
		bricks[1] = randBrick(finishLine);
		bricks[2] = randBrick(finishLine);
		bricks[3] = randBrick(finishLine);
		bricks[4] = randBrick(finishLine);
		bricks[5] = randBrick(finishLine);
		Arrays.sort(bricks);
	}
	
	public static boolean bricksUp(int[] array, int number) {	
		int a =  Arrays.binarySearch(array, (number - 5));
		if(a > 0 || finishLine == number - 5)
			return true;
		else
			return false;
	}
	public static boolean bricksDown(int[] array, int number) {	
		int a =  Arrays.binarySearch(array, (number + 5));
		if(a > 0 || finishLine == number + 5)
			return true;
		else
			return false;
	}
	public static boolean bricksRight(int[] array, int number ) {	
		int a =  Arrays.binarySearch(array, (number + 1));
		if(a > 0 || finishLine == number + 1)
			return true;
		else
			return false;
	}
	 public static boolean bricksLeft(int[] array, int number) {	
		int a =  Arrays.binarySearch(array, (number - 1));
		if(a > 0 || finishLine == number - 1)
			return true;
		else
			return false;
	}
	
	
	@Override
	public void keyPressed(KeyEvent e) {
		if(e.getKeyCode()==38 && r > 4 && bricksUp(bricks, r) == false){
			r = r - 5;
			components.get( r ).setBackground( Color.GREEN );
			components.get(r + 5).setBackground(Color.WHITE);
		} 
		if(e.getKeyCode()==37 && r % 5 != 0 && bricksLeft(bricks, r) == false){
			r = r - 1;
			components.get( r ).setBackground( Color.GREEN );
			components.get(r + 1).setBackground(Color.WHITE);
		}
		if(e.getKeyCode()==39 && r % 5 != 4 && bricksRight(bricks, r) == false){
			r = r + 1;
			components.get( r ).setBackground( Color.GREEN );
			components.get(r - 1).setBackground(Color.WHITE);
		}
		if(e.getKeyCode()==40 && r < 20 && bricksDown(bricks, r) == false){
			r = r + 5;
			components.get( r ).setBackground( Color.GREEN );
			components.get(r - 5).setBackground(Color.WHITE);
		}
	}

	@Override
	public void keyReleased(KeyEvent e) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void keyTyped(KeyEvent e) {
		// TODO Auto-generated method stub
		
	}
}
